<!DOCTYPE html>
<html>

<head>
    <!-- Google Tag Manager -->
    <script>(function (w, d, s, l, i) {
            w[l] = w[l] || []; w[l].push({
                'gtm.start':
                    new Date().getTime(), event: 'gtm.js'
            }); var f = d.getElementsByTagName(s)[0],
                j = d.createElement(s), dl = l != 'dataLayer' ? '&l=' + l : ''; j.async = true; j.src =
                    'https://www.googletagmanager.com/gtm.js?id=' + i + dl; f.parentNode.insertBefore(j, f);
        })(window, document, 'script', 'dataLayer', 'GTM-NLRXDFCH');</script>
    <!-- End Google Tag Manager -->
    <link rel="stylesheet"
        href="https://cdnjs.cloudflare.com/ajax/libs/highlight.js/11.9.0/styles/atom-one-dark.min.css">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.3/css/all.min.css">
    <link href="https://fonts.googleapis.com/css2?family=Roboto:wght@400;700&display=swap" rel="stylesheet">


    <script src="https://cdnjs.cloudflare.com/ajax/libs/highlight.js/11.9.0/highlight.min.js"></script>
    <title>Tracker for Undocumented Nostr Event Kinds</title>
    <style>
        body {
            font-family: Roboto, 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            font-size: 18px;
            margin: 0 15%;
            background-color: #121212;
            color: #e0e0e0;
        }

        h1 {
            color: #e0e0e0;
        }

        table {
            overflow-x: auto;
            width: 100%;
            border-collapse: collapse;
            table-layout: auto;
            margin-top: 20px;
            box-shadow: 0 2px 4px rgba(255, 255, 255, 0.1);
            background-color: #1e1e1e;
            color: #e0e0e0;
        }

        th,
        td {
            padding: 12px 15px;
            text-align: left;
            border-bottom: 1px solid #333;
            word-wrap: break-word;
            /* Ensures text wraps within the cell */
            min-width: 100px;
            /* Example minimum width */
        }

        th {
            background-color: #303030;
            color: #ffffff;
            text-transform: uppercase;
        }

        tr:nth-child(even) {
            background-color: #262626;
        }

        tr:hover {
            background-color: #333333;
        }

        a {
            color: #1e90ff;
            text-decoration: none;
        }

        a:hover {
            text-decoration: underline;
        }

        .footer {
            margin-top: 40px;
            text-align: center;
            color: #999;
            /* Lighter text in footer for visibility */
        }

        @media (max-width: 1280px) {
            body {
                margin: 20px;
                font-family: Roboto, 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
                font-size: 18px;
                background-color: #121212;
                color: #e0e0e0;
            }
        }

        .json-content {
            background-color: #262626;
            /* Adjusting for dark mode */
            border: 1px solid #333;
            color: #e0e0e0;
            /* Text color for readability */
        }

        .toggle-indicator {
            cursor: pointer;
        }

        th {
            cursor: pointer;
        }

        .sort-indicator {
            margin-left: 5px;
        }

        .hidden {
            display: none;
        }
    </style>

</head>

<body>
    <!-- Google Tag Manager (noscript) -->
    <noscript><iframe src="https://www.googletagmanager.com/ns.html?id=GTM-NLRXDFCH" height="0" width="0"
            style="display:none;visibility:hidden"></iframe></noscript>
    <!-- End Google Tag Manager (noscript) -->
    <h1>Tracker for Undocumented Nostr Event Kinds</h1>
    <p>
        This service monitors undocumented event kinds in the Nostr network, aiding developers and researchers who are
        looking to introduce new kinds without clashing with others. For programmatic access, use the <a
            href="/json">JSON endpoint</a>.
    </p>
    <p>
        The tracker not only helps avoid clashes but also provides insights into the evolving use of the network,
        revealing emerging trends and creative concepts before they're formalized in NIPs.
    </p>
    <p><strong>Note:</strong> Kinds not observed for a month are removed from the list.</p>



    <div>
        <table>
            <thead>
                <tr>
                    <th>Kind <span class="sort-indicator"></span></th>
                    <th>Recommended App <span class="sort-indicator"></span></th>
                    <th>Latest Event Sampled <span class="sort-indicator"></span></th>
                    <th>Seen Times <span class="sort-indicator"></span></th>
                    <th>Last Seen At <span class="sort-indicator"></span></th>
                    <th class="hidden"></th>
                </tr>
            </thead>
            <tbody>
                {{#each stats}}
                <tr class="row-toggle" data-event-json='{{json this.[1].event}}'>
                    <td> <a
                            href="https://github.com/search?q=repo%3Anostr-protocol%2Fnips++%2Fkind.*%5Cb{{this.[0]}}%5Cb%2F&type=code">{{this.[0]}}</a>
                    </td>
                    <td>{{this.[1].recommended_app}}</td>
                    <td class="toggle-indicator">
                        <span><i class="fas fa-chevron-down"></i></span>
                        <a href="#" class="event-link">{{ellipsis this.[1].event.id 20}}</a>
                    </td>
                    <td>{{this.[1].count}}</td>
                    <td>{{date_relative this.[1].last_updated}}</td>
                    <td class="hidden">{{this.[1].last_updated }}</td>
                </tr>
                {{/each}}
            </tbody>
        </table>
    </div>
    <div class="footer">
        <p>For feedback or inquiries, feel free to reach out at Nostr:</p>
        <p><a href="nop: daniel@nos.social" style="color: #007bff; text-decoration: none;"><i
                    class="fas fa-paper-plane"></i> daniel@nos.social</a></p>
    </div>

    <script>


        document.addEventListener('DOMContentLoaded', () => {
            const getCellValue = (tr, idx) => tr.children[idx] ? tr.children[idx].innerText || tr.children[idx].textContent : '';
            const comparer = (idx, asc) => (a, b) => ((v1, v2) =>
                v1 !== '' && v2 !== '' && !isNaN(v1) && !isNaN(v2) ? v1 - v2 : v1.toString().localeCompare(v2)
            )(getCellValue(asc ? a : b, idx), getCellValue(asc ? b : a, idx));

            document.querySelectorAll('th').forEach(th => {
                let indicator = th.querySelector('.sort-indicator');
                th.addEventListener('click', function () {
                    const table = th.closest('table');
                    const tbody = table.querySelector('tbody');


                    const jsonRows = tbody.querySelectorAll('.json-display-row');
                    jsonRows.forEach(row => {
                        row.remove();
                    });

                    let index = Array.from(th.parentNode.children).indexOf(th);

                    if (index === 4) {
                        index = 5;
                    }

                    Array.from(tbody.querySelectorAll('tr'))
                        .sort(comparer(index, this.asc = !this.asc))
                        .forEach(tr => tbody.appendChild(tr));

                    document.querySelectorAll('.sort-indicator').forEach(indicator => {
                        indicator.textContent = '';
                    });

                    indicator.textContent = this.asc ? '↑' : '↓';
                });
            });

            document.querySelectorAll('pre code').forEach((block) => {
                hljs.highlightElement(block);
            });

            document.querySelectorAll('.row-toggle .toggle-indicator').forEach(toggle => {
                toggle.addEventListener('click', (event) => {
                    event.preventDefault();
                    event.stopPropagation();
                    const row = toggle.closest('.row-toggle');
                    let nextRow = row.nextElementSibling;
                    const jsonData = atob(row.getAttribute('data-event-json'));

                    if (nextRow && nextRow.classList.contains('json-display-row')) {
                        nextRow.style.display = nextRow.style.display === 'none' ? '' : 'none';
                    } else {
                        const detailRow = document.createElement('tr');
                        detailRow.className = 'json-display-row';
                        const detailCell = document.createElement('td');
                        detailCell.colSpan = 6;
                        detailCell.classList.add('json-content');
                        const pre = document.createElement('pre');
                        const code = document.createElement('code');
                        code.className = 'json';
                        code.textContent = jsonData; // Safely assigns text, escaping HTML and JS

                        pre.appendChild(code);
                        detailCell.appendChild(pre);

                        detailRow.appendChild(detailCell);
                        row.parentNode.insertBefore(detailRow, nextRow);

                        hljs.highlightElement(detailCell.querySelector('code'));
                    }
                });
            });

        });
    </script>
</body>

</html>